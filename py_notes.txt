PROGRAM
Bilgisayar programı, bilgisayara
belirli bir işlemi ya da işlemleri
gerçekleştirebilmesi için verilen
komut ya da komutlar bütünüdür

PROGRAMLAMA DİLİ
Programlama dili, yazılımcının bir
algoritmayı ifade etmek amacıyla,
bir bilgisayara ne yapmasını istediğini
anlatmasının tektipleştirilmiş
yoludur.

Derleyiciler kaynak kodları makine koduna derleme
görevine hizmet eden yazılımlardır. Bir programlama
dilinin derleyicisi, o programlama dili kullanılarak
yazılmış olan kodu hedef işlemci mimarisine göre
uygun şekilde makine koduna derler ve genellikle çıktı
olarak yurutulebilir dosyasının elde edilmesini sağląr.
Fortran, C, C++, C#, Pascal, Delphi, Pic Basic Pro gibi
diller derleyici kullanırlar.

Yorumlayıcı, yazılımı kısım kısım ele alarak doğrudan
çalıştırır. Yorumlayıcılar standart bir çalıştırılabilir kod
üretmezler. Yorumlama işlemi aşama aşama
yapılmadığı için genellikle ilk hatanın bulunduğu yerde
programin çalışması kesilir.
Python, Ruby, Java, Lisp, BASIC, AWK,PHP gibi diller
yorumlayıcı kullanırlar.

KAYNAK PROGRAM (SOURCE CODE)
Herhangi bir yazılımın işlenip makine diline
çevrilmeden önce insanların okuyup üzerinde
çalışabildiği programlama diliyle yazılmış halidir.

EDİTÖR NEDİR?
Kaynak kodu düzenleyicisi, bilgisayar
programının kaynak kodunu düzenlemek
için özel olarak tasarlanmış bir metin
düzenleyici programıdır. Bağımsız bir
uygulama olabileceği gibi bir tümleşik
geliştirme ortamı veya web tarayıcısı içine
de yerleştirilebilir.

ÇALIŞTIRILABİLİR DOSYA (EXECUTABLE FİLE)
Bir programlama dilinde yazılmış kaynak programın
derlenmesi ile elde edilen, makine diline dönüştürülmüş
ve çalışmaya hazır programa denir. Bu dosyaların
Windows, MS-DOS tabanlı sistemlerdeki dosya
uzantısı .exe'dir.

PYTHON
Python, nesne tabanlı,
yorumlamalı, birimsel ve etkileşimli
yüksek seviyeli bir programlama
dilidir. Girintilere dayalı basit söz
dizimi, dilin öğrenilmesini ve akılda
kalmasını kolaylaştırır.
Guido van Rossum, Hollandalı
bir bilgisayar programcısıdır.
Python programlama dilinin
yazarıdır.
Python programlama dili ile şunlar yapılabilir:
Web sitesi geliştirme
Oyun tasarımı
Robotik uygulamalar
Veri analizi
Makine öğrenimi uygulamaları
Yapay zeka uygulamaları
Tarayıcı web uygulama otomasyonu
Programların işlevselliğini arttırmak
Hesaplama yapma
Çekiliş uygulaması hazırlama
Sözlük oluşturma
Sosyal medya uygulamaları

IDLE NEDİR ?
Her Python kurulumu, IDLE ve hatta IDE olarak
kısaltılmış olarak göreceğiniz bir Entegre Geliştirme
ve Öğrenme Ortamı ile birlikte gelir. Bunlar, daha
verimli kod yazmanıza yardımcı olan bir uygulama
sınıfıdır. Aralarından seçim yapabileceğiniz pek çok
IDE olmasına rağmen, Python IDLE oldukça basittir,
bu da onu yeni başlayan bir programcı için
mükemmel bir araç haline getirir.

www.python.org sitesinden pythonın son sürümünü indirip kurabilirsin.

 IDLE kullanırken shell programlama dediğimiz kısımla karşılaşıyoruz.
 burada kısa ölçekli kodlar yazabiliriz ancak bu kodlar kaydedilmez ve anlık çıktı verir.
 biz uzun ve kaydedilebilir dosyalar kullanmayı tercih edeceğiz.
 bunun için sol üstte bulunan file kısmından new file'a basarak yeni bir dosya oluşturabiliriz.
 yazdığımız kodları kaydetmek için yine file kısmındam save'e basabiliriz veya kısayol olarak ctrl+s yapabiliriz.
 IDLE içinde önceden yazdığım kodları tekrar düzenlemek istersek file'a gelip open kısmından doasy akonumuna gidip kodalrı tekrar bu ekrana getirtebiliriz.
 yazdığımı zkodları çalıştırmak için kod yazdığım ekranda bulunan run kısmına gelip(en üstte) run module'e basabilir veya kısayol olarak f5 kullanabiliriz.
 bu işlem programı kabuk ekranda çalıştırır.
 
SYNTAX (SÖZDİZİMİ)
Programlama dillerinde de bulunan Syntax yani
türkçe anlamıyla söz dizimi, çeşitli sembol
kombinasyonlarının ne anlama geldiğini tanımlar.
yazılım dillerinde insan diline yakın olan dillere yüksek seviyeli diller,
makine diline yakın olan dillere düşük seviyeli diller denir.

---DEĞİŞKENLER---
Değisken: bilgisayar biliminde, niceliğin depolanabileceği bir yer, alan ifade eder
matematiksel vey asözel değerler alabilirler. bir değişkene değer atamak için =(atama) operatörü kullanılır.
sol tarafta yazılan yeni değer alacak olan değişkendir sağdaki de ona veriecek olan değerdir.
örnek:
a = 8
print (a)
b = 2
print (b)
a = b
print(a)
şeklindeki bir kod bloğunda a ve b ye farklı değerler verilerek değişkenler tanımlandı son kısımda ise b'nin değeri a'ya atandı.
bu şekilde son kısımda a'nın değeri 2 'ye eşit oldu.

DEĞİŞKEN İSİMLENDİRME KURALLARI
1. Kural:
Bir değişken isminin ilk karakteri ya harf
ya da alt çizgi '_' olmalıdır. sayı olmamalıdır.
2. Kural:
Bir değişken ismi içerisinde alt çizgi '_
hariç boşluk veya diğer özel karakterler
bulunmamalıdır.(boşluk, nokta, virgül, parantez vb.)
3. Kural:
Bir değişken ismi bir python komutu
olamaz.
bunların neler olduğunu görmek için python'da şu komutlar kullanılır;
import keyword
keyword.kwlist
burada çıkan kelimelri değişken adı olarak kullanamayız.
4. Kural:
Bir değişken isimlerinde türkçe karakter
kullanmamalıyız.
5. Kural:
Bir degisken küçük harf ile
isimlendirildiyse ayni harfin büyügü ile
farkli bir degisken olusturulabilir. Bu
duruma dikkat edilmelidir.

DEĞİŞKENLERİ BİRBİRİNE AKTARMA
a= 3
b= 4 olsun şimdi a ile b nin değerlerini değiştirmek için pythonda kısayol bulunur 
a,b=b,a şeklinde a'nın içeriği b'ye, b'nin içeri a'ya aktarılır.
bu string değişkenler için de geçerlidir

DEĞİŞKENİN BAŞLANGIÇ DEĞERİ
bir değişkeni tanımlarken bir başlangıç değeri vermektir.
örnek olarak bir iş için para topladığımızı düşünel,m bu toplanan paralar bir kutuda toplanacak olursa bizim bir çok kişiden çıkan para bu kotuya konulur ve en son kutudaki paralar sayıldığında bu bizim verdiğimiz paraların toplamı olmayabilir çünkü kutunun başlangıçtaboş olup olmadığını bilmiyordum bunun için başlangıçta bu kutunun boş olduğunu göstermek için bir başlangıç değeri atamalıyız.

OPERATÖRLER
+ : toplama
- : çıkarma
* : çarpma 
/ : bölme
//: tam sayı olmayan bölmelerde sadece tam kısmını ekrana yazdırır
**: üs alma
% : mod bölme işleminden kalan

İŞLEM ÖNCELİĞİ
işlem önceliği büyükten küçüğe sıralama;
parantez içi
üs almaçarpma
bölme
mod
toplama
çıkarma

DEĞER ATAMA İŞLEMLERİ
cep=0
cep=cep+10
print(cep)
# (diyez) işareti pythonda tek satırlık yorum satırı için kullanılır.
#yukarıdaki işlemi daha kısa şekilde yazmak için += kullanılabilir.
# += sağdaki ifadeyi solda bulunan değerle topla değişkene ata
# -= sağdaki ifadeyi solda bulunan değerden çıkar değişkene ata
# bu işlemi bütün operatörlerde kullanabiliriz.
cep+=10 
print(cep)

VERİ TİPLERİ
int : tamsayı veri tipi
float : ondalık sayı veri tipi
bool : doğru-yanlış veri tipi
str : karakter veri tipi(tek tırnak veya çift tırnak ile kullanılabilir + operatörü ile birleştirilebilir.)
bir değişkenin hangi veri tipinde olduğunu sorabiliriz bunu için kullanılan kod;
a=4.5
type(a)
dediğimde bana 
<class 'float'>
şeklinde geri dönüş yapacak
= atama operatörü
== ise karşılaştırma operatörü

VERİ TİPİ DÖNÜŞÜMLERİ
(int)(9.60)
9
şeklinde çıktı verecektir
int ifadesi parantez içinde olmak zorunda değil
int(4.5)
4 şekline sonuç verir
bu şekilde diğer veri tiplerine de dönüştürülebilir.
str(4)+str(4) kodunun çıktısı 4 ile 4'ün yan yana yazılması şeklinde olur
'44' şeklinde çıktı alırız.

YORUM SATIRLARI
# yorum satırı koymak için kullanılır. tek satırlık yorum satırı yazılabilir bununla

---VERİ İŞLEMLERİ---

VERİ GİRİŞ KOMUTU
input():kullanıcıdan veri girdisi alır. string türünde bir girdi alır.

VERİ ÇIKIŞ KOMUTU
print(): ekrana yazdırma şişlevi görür.
sep: çıktı mesajındaki karakterler arasına ayraç koymak için kullanılır.
print ('b','t','k')
print ('b','t','k', sep=',')#harfleri hangi işaretle ayıracağını belirtir. burada harfleri virgüllerle ayıracak.
print("btk"*3)#string bir ifadeyi kaç kere yazacağımız belirtir ekrana 3 defa btk yazar bitişik şekilde
print("yaşınız", end=(''))
#aynı print içinde iki kelimeyi alt alta yazadırmak istersek
print("btk\nAkademi")
#bir tab boşluk bırakmak için
print("btk\tAkademi")

FORMAT()
print kodunun çok farklı şekillerde kullanımı vardır.
a=5
print("a:",a)
print("a={0}".format(a))
print(f"a={a}")
print("a="+str(a)) 
bu 4 farklı kodunda çıktısı aynıdır.

PRİNT İLE ÇİZİM UYGULAMASI
#dog face
print(" ___\n/* *\\\n \./")
print("\n")
#fish1
print(" /\n/\\/\n\\/\\\n \\")
print("\n")
#fish2
print("  _\n /_|\n('_)<|\n \\_|")

---KOŞUL VE KARŞILAŞTIRMA OPERATÖRLERİ---
KOŞUL İFADELERİ
koşul içerisindeki verilerin birbiriyle karşılaştırılmasında kullanılır.
if : Tek koşula bağlı gerçekleşecek işlemler için
if else: Çift koşula bağlı gerçekleşecek işlemler için
if elif else: Çoklu koşula bağlı gerçekleşecek işlemler için

BOOLEAN İFADELERİ
sonuç doğru ise true, yanlış ise false değerini üretirler
== : eşittir
!= :eşit değildir
>  : büyüktür
<  : küçüktür
>= :büyük eşittir
<= :küçük eşittir

MANTIKSAL OPERATÖRLER
mantıksal VE: and operatörü(bütün koşullar doğruysa doğru)
mantıksal VEYA: or operatörü(koşullardan herhangi birisi doğruysa doğru)
değili NOT: doğruysa yanlış, yanlışsa doğru döndürür.

İF KOMUTU
-if komutu kullanılırken şart ifadesi parantez içinde yazılmadı ve koşulun sonuna : koyuldu
if 5==5: #şeklinde bir if bloğu oluşturuldu.
	print(eşittir)
-if else komutu
a=25
b=int(input("guess the number"))
if a==b:
    print("you are right:)")
else:
    print("you are wrong:(")
burada önemli nokta if ve else koşul ifadelerinden sonra : koymanın zorunlu olmasıdır. bunu koymadığımız takdirde hata ile karşılaşırız.

---DÖNGÜLER---
-FOR: döngü sayısı önceden belli olan döngüler
-WHILE: döngü sayısı önceden belli olmayıp koşula bağlıdır.

liste :sıralı eleman dizisi
liste=['ali','can','miray','zeynep']
print(liste) bunun çıktısı:
>>>['ali','can','miray','zeynep']

liste2=[1,2,3,4,5]
print(liste2)
>>>[1,2,3,4,5]

liste3="python"
>>>python

in: liste içinde olup olmadığını kontrol eden operatördür. olması halinde true döndürür.
liste'yi ele alalım
print(liste) 
>>>['ali','can','miray','zeynep']
print('ali' in liste)
>>> true
not in: listede olup olmadığını kontrol eden operatördür. olmaması halinde true döndürür.

RANGE FONKSİYONU
range(0,5):0'dan 5'e kadar sayıları yazar üst sınır dahil edilmez. 0,1,2,3,4 gibi
range(11,6)=11,10,9,8,7 şeklinde azalarak da gidebilir
range(1,10,2): 1'den başlasın, 10'a kadar 2'şer 2'şer gitsin.
>>>1,3,5,7,9 şeklinde gider.
range(15,3,-4):15'ten başlasın,3'e kadar 4'er 4'er azalarak gitsin.
>>>15,11,7
bunu kontrol etmek için for döngüsü kullanılabilir
for a in range(0,5):
	print(a)
>>>0
>>>1
>>>2
>>>3
>>>4 
şeklinde çıktıya sahip olur.

FOR DÖNGÜSÜ
for döngüsü belli sayıdaki işlemi gerçekleştirmek için kullanılır.
for döngüsünün de sonuna : konulur ve döngü içine yazılacak işlemi 4 boşluk içeriden başlatmak gerekir
1'den 30'a kadar olan tek sayıları yazdırmak istersek
for x in range(1,30):
	(if x%==1):
		print(x)
		

WHILE DÖNGÜSÜ
koşul sağlandığı sürece devam eden döngülerdir.
örnek olarak sıfırdan farklı olduğu sürece girilen sayının karesin alan bir program yazalım 
x=1
print("if you want to exit please enter 0")
while (x!=0):
	x=int(input("please enter numberthat you want to take square"))
	print("square of x=", x*x)
print("goodbye:)")
sonsuz döngü;
print("enter 0 to exit")
while True:
	d =int(input("please enter number:"))
	print("square=", d*d)
	if(d==0):
		break #döngüyü kırar ne olduğuna bakmaksızın döngüden çıkar.
continue: görüldüğü yerde altındaki kodları okumadan döngünün başına döndürür.
#yedi ve katları hariç 0'dan 100'e kadar olan sayıları yazdıran program
for a in range(100):
	if(a%7==0):
		continue
	print(a)

İÇ İÇE DÖNGÜLER
çarpım tablosu oluşturmak için bu tip döngüler kullanabiliriz
çarpım tablosunda iki değer vardır ilk çarpan ve ikinci çarpan 
öncelikle ilk çarpanı değiştirmek için bir for döngüsü tanımlanır ve bunun içine ikinci çarpanı değiştirmek için bir for döngüsü tanımlanır
ilk döngü ilk değerle braber 2. döngünün içine girer ve ikinci döngü bitmeden ilk döngüden gelen değer değişemez
for a in range(1,11):
    for b in range(1,11):
        print(a,"*",b,"=",a*b)
    print("\n")
şeklinde bir kod bloğu bulunur.

---FONKSİYONLAR---
Fonksiyon: Programın belli işlevini (görevini)
yerine getiren küçük program parçalarıdır.

FONKSİYON TANIMLAMA
print() gibi fonksiyonalr yerleşik fonksiyonlardır. 
değişken adının yanında aç kapa parantez bulunuyorsa bu fonksiyon oludğunu gösterir.
fonksiyon tanımlamak için def parametresi kullanılır
def toplama():
	print ("toplama iki veya daha fazla sayının toplanmasıdır.")
	print("örneğin 5+7=12")
bu bir fonksiyon tanımıdır.

fonksiyonlara parametre verilebilir.
bir restorana gelen kişilere selam veren bir program yazalım:

def selamlama(isim):
	print("sayın",isim,"restoranımıza hoşgeldiniz")
while True:
	ad=input("isminiz nedir?:")
	if (ad=="dur"):
		break
	selamlama(ad)
	
selamlama fonksiyonu çağırılıp içine de kullanıcıdan aldığımız ad değişkenini parametre olarak tanımladım
fonksiyonun parametresini varsayılan olarak bir değer yapabiliriz farklı bir değer verilmediği sürece bu değeri alakrak bize çıktı verir.

RETURN()
bir fonksiyonun döndürdüğü değerdir.
ana fonksiyon içinden ulaşmak istediğimiz bir değer varsa bu ifadeyi kullanırız.

FONKSİYONDA GLOBAL VE LOKAL DEĞİŞKEN
yerel/lokal değişken: fonksiyon içinde tanumlanan ve fonksiyon dışında geçerliliği olmayan değişkenlerdir
genel/global değişken: fonksiyonun dışında da geçerliliği olan değişkenlerdir.
fonksiyon içinde tanımlı olan bir değişkeni globalde de kullanmak istiyorsam fonksiyonun içinde bunu belirtmem gerekir.
def topla():
	global a
	a=5
	b=6
	return (a+b)
print(topla())
print(a)
fonskiyonun içinde a'nın global bir değişken olduğunu belirtmiş olduk.
global a =5 şeklinde bir tanımlama ise söz konusu olmaz global sadece bildiri yapmak için kullanılır.

İÇERİĞİ OLMAYAN FONKSİYON
fonksiyonu tanımlayıp içeriklerini sonra dolduracak olursam bu durumda bu durumda hata almamak için fonksiyonun içine pass veya boş return yazabilirim
def topla():
	global a
	a=5
	b=6
	return (a+b)
def carpma():
	pass
def cıkarma():
	return
print(topla())
print(cıkarma())
print(carpma())
print(a)

FONKSİYON KISALTMA(LAMBDA)
tek satırlık bir fonksiyon tanımlayacaksak bunu kullanabiliriz.

def dolar(TL):
	return(TL/18)
bunu bu şekilde yazmak yerine kısaca şöyle de yazabiliriz;
dolar=lambda TL: TL/18

ÖZYİNELEMELİ(REKÜRSİF) FONKSİYONLAR
bir fonksiyonun içerisinde yine aynı fonksiyonu çağırırsak bu özyinelemeli fonksiyon olur.

def ustel(a,b):
	if b==0:
		return 1
	else:
		return a*ustel(a,b-1)
print (ustel(2,4))
parametre:fonksiyonu tanımlarken parantez içine koyduğumuz.
argüman:fonksiyonu çağırırken parantez içine koyduğumuz.
